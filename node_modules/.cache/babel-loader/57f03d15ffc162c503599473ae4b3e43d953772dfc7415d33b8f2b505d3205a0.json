{"ast":null,"code":"/**\n * Author: Alexandre Chabeau\n * License: MIT\n * Contact: alexandrechabeau.pro@gmail.com\n * Original repos: https://github.com/saucyspray/split-text-js\n */\nclass SplitTextJS {\n  constructor(_target) {\n    this.result = new Object();\n    this.result.originalText = _target.innerText;\n    this.result.splitted = this.split(_target);\n    this.result.words = this.result.splitted.querySelectorAll('.SplitTextJS-wrapper');\n    this.result.chars = this.result.splitted.querySelectorAll('.SplitTextJS-char');\n    this.result.spaces = this.result.splitted.querySelectorAll('.SplitTextJS-spacer');\n    return this.result;\n  }\n  createSpan(_class) {\n    let span = document.createElement('span');\n    span.style.display = \"inline-block\";\n    span.className = _class;\n    return span;\n  }\n  split(_target) {\n    let containerArray = new Array();\n    const splittedTarget = _target.innerText.split(' ');\n    let counter = splittedTarget.length;\n    splittedTarget.map(word => {\n      const wrapper = this.createSpan('SplitTextJS-wrapper');\n      word.split(/(?!^)/).map(char => {\n        let el = this.createSpan('SplitTextJS-char');\n        el.innerText = char;\n        wrapper.appendChild(el);\n      });\n      counter--;\n      containerArray.push(wrapper);\n      if (counter > 0) {\n        let space = this.createSpan('SplitTextJS-char SplitTextJS-spacer');\n        space.innerHTML = '&nbsp;';\n        containerArray.push(space);\n      }\n    });\n    _target.innerHTML = '';\n    containerArray.forEach(child => {\n      _target.appendChild(child);\n    });\n    return _target;\n  }\n}\nmodule.exports = SplitTextJS;","map":{"version":3,"names":["SplitTextJS","constructor","_target","result","Object","originalText","innerText","splitted","split","words","querySelectorAll","chars","spaces","createSpan","_class","span","document","createElement","style","display","className","containerArray","Array","splittedTarget","counter","length","map","word","wrapper","char","el","appendChild","push","space","innerHTML","forEach","child","module","exports"],"sources":["C:/Users/nicho/IdeaProjects/portfolio/node_modules/split-text-js/SplitTextJS.js"],"sourcesContent":["/**\n * Author: Alexandre Chabeau\n * License: MIT\n * Contact: alexandrechabeau.pro@gmail.com\n * Original repos: https://github.com/saucyspray/split-text-js\n */\nclass SplitTextJS {\n    constructor(_target) {\n        this.result = new Object()\n        this.result.originalText = _target.innerText\n        this.result.splitted = this.split(_target)\n        this.result.words = this.result.splitted.querySelectorAll('.SplitTextJS-wrapper')\n        this.result.chars = this.result.splitted.querySelectorAll('.SplitTextJS-char')\n        this.result.spaces = this.result.splitted.querySelectorAll('.SplitTextJS-spacer')\n        return this.result\n    }\n    createSpan(_class) {\n        let span = document.createElement('span')\n        span.style.display = \"inline-block\"\n        span.className = _class\n        return span\n    }\n    split(_target) {\n        let containerArray = new Array\n        const splittedTarget = _target.innerText.split(' ')\n        let counter = splittedTarget.length\n        splittedTarget.map(word => {\n            const wrapper = this.createSpan('SplitTextJS-wrapper')\n            word.split(/(?!^)/).map(char => {\n                let el = this.createSpan('SplitTextJS-char')\n                el.innerText = char\n                wrapper.appendChild(el)\n            })\n            counter--\n            containerArray.push(wrapper)\n            if (counter > 0) {\n                let space = this.createSpan('SplitTextJS-char SplitTextJS-spacer')\n                space.innerHTML = '&nbsp;'\n                containerArray.push(space)\n            }\n        })\n        _target.innerHTML = ''\n        containerArray.forEach(child => {\n            _target.appendChild(child)\n        })\n        return _target\n    }\n}\nmodule.exports = SplitTextJS;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,CAAC;EACdC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACC,MAAM,GAAG,IAAIC,MAAM,CAAC,CAAC;IAC1B,IAAI,CAACD,MAAM,CAACE,YAAY,GAAGH,OAAO,CAACI,SAAS;IAC5C,IAAI,CAACH,MAAM,CAACI,QAAQ,GAAG,IAAI,CAACC,KAAK,CAACN,OAAO,CAAC;IAC1C,IAAI,CAACC,MAAM,CAACM,KAAK,GAAG,IAAI,CAACN,MAAM,CAACI,QAAQ,CAACG,gBAAgB,CAAC,sBAAsB,CAAC;IACjF,IAAI,CAACP,MAAM,CAACQ,KAAK,GAAG,IAAI,CAACR,MAAM,CAACI,QAAQ,CAACG,gBAAgB,CAAC,mBAAmB,CAAC;IAC9E,IAAI,CAACP,MAAM,CAACS,MAAM,GAAG,IAAI,CAACT,MAAM,CAACI,QAAQ,CAACG,gBAAgB,CAAC,qBAAqB,CAAC;IACjF,OAAO,IAAI,CAACP,MAAM;EACtB;EACAU,UAAUA,CAACC,MAAM,EAAE;IACf,IAAIC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IACzCF,IAAI,CAACG,KAAK,CAACC,OAAO,GAAG,cAAc;IACnCJ,IAAI,CAACK,SAAS,GAAGN,MAAM;IACvB,OAAOC,IAAI;EACf;EACAP,KAAKA,CAACN,OAAO,EAAE;IACX,IAAImB,cAAc,GAAG,IAAIC,KAAK,CAAD,CAAC;IAC9B,MAAMC,cAAc,GAAGrB,OAAO,CAACI,SAAS,CAACE,KAAK,CAAC,GAAG,CAAC;IACnD,IAAIgB,OAAO,GAAGD,cAAc,CAACE,MAAM;IACnCF,cAAc,CAACG,GAAG,CAACC,IAAI,IAAI;MACvB,MAAMC,OAAO,GAAG,IAAI,CAACf,UAAU,CAAC,qBAAqB,CAAC;MACtDc,IAAI,CAACnB,KAAK,CAAC,OAAO,CAAC,CAACkB,GAAG,CAACG,IAAI,IAAI;QAC5B,IAAIC,EAAE,GAAG,IAAI,CAACjB,UAAU,CAAC,kBAAkB,CAAC;QAC5CiB,EAAE,CAACxB,SAAS,GAAGuB,IAAI;QACnBD,OAAO,CAACG,WAAW,CAACD,EAAE,CAAC;MAC3B,CAAC,CAAC;MACFN,OAAO,EAAE;MACTH,cAAc,CAACW,IAAI,CAACJ,OAAO,CAAC;MAC5B,IAAIJ,OAAO,GAAG,CAAC,EAAE;QACb,IAAIS,KAAK,GAAG,IAAI,CAACpB,UAAU,CAAC,qCAAqC,CAAC;QAClEoB,KAAK,CAACC,SAAS,GAAG,QAAQ;QAC1Bb,cAAc,CAACW,IAAI,CAACC,KAAK,CAAC;MAC9B;IACJ,CAAC,CAAC;IACF/B,OAAO,CAACgC,SAAS,GAAG,EAAE;IACtBb,cAAc,CAACc,OAAO,CAACC,KAAK,IAAI;MAC5BlC,OAAO,CAAC6B,WAAW,CAACK,KAAK,CAAC;IAC9B,CAAC,CAAC;IACF,OAAOlC,OAAO;EAClB;AACJ;AACAmC,MAAM,CAACC,OAAO,GAAGtC,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}